<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cyf.cblog.mapper.BlogTagMapper">
    <resultMap id="BaseResultMap" type="com.cyf.cblog.entity.BlogTag">
        <!--@mbg.generated-->
        <!--@Table blog_tag-->
        <id column="tag_id" jdbcType="INTEGER" property="tagId"/>
        <result column="tag_name" jdbcType="VARCHAR" property="tagName"/>
        <result column="use_num" jdbcType="BIGINT" property="useNum"/>
        <result column="is_deleted" jdbcType="TINYINT" property="isDeleted"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        tag_id, tag_name, use_num, is_deleted, create_time
    </sql>
    <update id="deleteTagByIds">
        update blog_tag
        set is_deleted = 1
        where tag_id in
        <foreach collection="array" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    <select id="findHotBlogTag" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from blog_tag
        where is_deleted = 0
        order by use_num desc
        limit 20
    </select>
    <select id="findBlogTagByBlogId" resultMap="BaseResultMap">
        select t.tag_id, t.tag_name, t.create_time, t.is_deleted, t.use_num
        from  blog b
        left join blog_tag_relation bt
        on bt.blog_id = b.blog_id
        left join blog_tag t
        on t.tag_id = bt.tag_id
        where t.is_deleted = 0
        <if test="blogId != null">
            and b.blog_id = #{blogId}
        </if>

    </select>
    <insert id="insertBlogTagList" parameterType="list" useGeneratedKeys="true" keyProperty="tagId">
        insert into blog_tag(tag_name, use_num, create_time)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.tagName, jdbcType=VARCHAR}, #{item.useNum, jdbcType=BIGINT}, #{item.createTime,jdbcType=TIMESTAMP})
        </foreach>
    </insert>

</mapper>